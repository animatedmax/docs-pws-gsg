---
title: Getting Started with Pivotal Web Services
---

_This page assumes that you are using cf v6._

Cloud Foundry allows you to deploy applications without worrying about
configuration headaches, making it faster and easier to build, test, deploy, and
scale your app.

This guide walks you through getting started at run.pivotal.io, powered by Cloud Foundry.

## <a id='intro'></a>Steps to Get Started ##

In order to run your application on run.pivotal.io, you need to:

1. [Sign up for an account](#signup)
1. [Install the `cf` command line tool and log in](#install-cf)
1. [Prepare your application on your local machine](#prepare-app)
1. [Push your application code to the cloud](#push-app)

## <a id='signup'></a>Sign Up for An Account ##

Before you can deploy your application, you will need an account on
run.pivotal.io.
If you had an account on cloudfoundry.com, your account credentials have already
been transferred to run.pivotal.io, and you can [log in to your account](https://login.run.pivotal.io/login).

If you do not have an account, you can [sign up here](https://console.run.pivotal.io).

## <a id='install-login'></a>Install cf Command Line Tool and Log In ##

You will use the `cf` command line tool to deploy your application.
You can also use it to check the health of your application, change settings,
and stop and restart your app.

### <a id='install-cf'></a>Download and Install cf ###

You can download `cf` from the [tools page](https://console.run.pivotal.io/tools).

For information on installing `cf`, see the [installation instructions](http://docs.run.pivotal.io/devguide/installcf/index.html).

### <a id='target'></a>Log In ###

Once you have `cf` installed, run `cf api api.run.pivotal.io` to target the run.pivotal.io API endpoint.

<pre class="terminal">
$ cf api api.run.pivotal.io
Setting api endpoint to api.run.pivotal.io...
OK

API endpoint: https://api.run.pivotal.io (API version: 2.0.0)
Not logged in. Use 'cf login' to log in.
</pre>

After targeting the API endpoint, log in using `cf login`.

When you log in, `cf` will prompt you for your username, password, organization,
and space.
In v2 Cloud Foundry, a space is a container for an application and all its
associated processes.
By default, your account has three spaces: development, production, and staging.
You can choose any of these spaces to deploy your application.

Example:

<pre class="terminal">
$ cf login
API endpoint: https://api.run.pivotal.io

Username> user@example.com

Password>********
Authenticating...
OK

Select an org (or press enter to skip):
1. my-org

Org> 1
Targeted org my-org

Select a space (or press enter to skip):
1: development
2: production
3: staging

Space> 1
Targeted space development

API endpoint: https://api.run.pivotal.io (API version: 2.0.0)
User:         user@example.com
Org:          my-org
Space:        development
</pre>

## <a id='prepare-app'></a>Prepare Your Application ##

Cloud Foundry supports many frameworks and runtimes using a buildpack model.
See the [Buildpack](http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#Buildpack) section of the [Prepare to Deploy an Application](http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html) topic for more
information.

## <a id='push-app'></a>Push Your Application to the Cloud ##

To push an application to the cloud, use `cf push APPNAME`.

By default, `cf push APPNAME` creates a URL to your application in the form
HOST.DOMAIN, where:

* **HOST** is the APPNAME used with `cf push`
* **DOMAIN** is the default shared domain of your Cloud Foundry instance.

Example: `cf push my-app` creates the URL my-app.<%=vars.app_domain%>.

The URL to your application must be unique.

If you want to create a URL different from an existing URL, you can use the `-n`
flag to specify a different HOST when pushing your application.

Example: `cf push my-app -n something-else` creates the URL something-else.<%=vars.app_domain%>.

`cf` deploys your application using default values for the number of instances,
amount of memory each instance can use, and other deployment attributes.
You can override these defaults using command-line options.
See the
[push](http://docs.run.pivotal.io/devguide/installcf/whats-new-v6.html#push)
section of [Getting Started with cf v6](http://docs.run.pivotal.io/devguide/installcf/whats-new-v6.html) for
more information.

You can also specify deployment options in a manifest.
See [Deploying with Application Manifests](http://docs.run.pivotal.io/devguide/deploy-apps/manifest.html) for more information.

Example:

The following transcript shows how `cf` assigns default values to an application
when given a minimal push command.

<pre class="terminal">
$ cf push my-app
Creating app my-app in org my-org / space development as user@example.com...
OK

Creating route my-app.cfapps.io...
OK

Binding my-app.cfapps.io to my-app...
OK

Uploading my-app...
Uploading app: 560.1K, 9 files
OK

Starting app my-app in org my-org / space development as user@example.com...
-----> Downloaded app package (552K)
OK
-----> Using Ruby version: ruby-1.9.3
-----> Installing dependencies using Bundler version 1.3.2
       Running: bundle install --without development:test --path vendor/bundle --binstubs vendor/bundle/bin --deployment
       Installing rack (1.5.1)
       Installing rack-protection (1.3.2)
       Installing tilt (1.3.3)
       Installing sinatra (1.3.4)
       Using bundler (1.3.2)
       Updating files in vendor/cache
       Your bundle is complete! It was installed into ./vendor/bundle
       Cleaning up the bundler cache.
-----> Uploading droplet (23M)
1 of 1 instances running
App started
Showing health and status for app my-app in org my-org / space development as user@example.com...
OK

requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: my-app.cfapps.io

     state     since                    cpu    memory        disk
#0   running   2014-01-24 05:07:18 PM   0.0%   18.5M of 1G   52.5M of 1G
</pre>

## <a id='troubleshooting'></a>Troubleshooting ##

If your application does not start on Cloud Foundry, first check that your
application can run locally.

You can also use `cf` to troubleshoot your application in the cloud.

### <a id='health'></a>Checking Health and Status ###

To check the health and status of your application, use `cf app APPNAME`.

Example:

<pre class="terminal">
$ cf app my-app
Showing health and status for app my-app in org my-org / space development as user@example.com...
OK

requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: my-app.cfapps.io

     state     since                    cpu    memory        disk
#0   running   2014-01-24 05:07:18 PM   0.0%   18.5M of 1G   52.5M of 1G
</pre>

### <a id='env'></a>Checking Environment Variables ###

`cf push` deploys the application to a container on the server.
The environment variables that reside in the container are the environment
variables of your application.

You can set environment variables in a manifest created before you deploy.
See [Deploying with Application Manifests](http://docs.run.pivotal.io/devguide/deploy-apps/manifest.html).

You can also set an environment variable with a `cf set-env` command followed by
a `cf push` command. Once you run `cf env`, you can see the variable locally,
but you must then run `cf push` for the variable to take effect in the container
environment.

To see the environment variables that you have set using the `cf set-env`
command, use `cf env APPNAME`.

Example:

<pre class="terminal">
$ cf env my-app
Getting env variables for app my-app in org my-org / space development as user@example.com...
OK

SAMPLE-VARIABLE: 10000
</pre>

To see the variables in the container environment, use `cf files APPNAME logs/env.log`.

Example:

<pre class="terminal">
$ cf files my-app logs/env.log
Getting files for app my-app in org my-org / space development as user@example.com...
OK

TMPDIR=/home/vcap/tmp
VCAP_APP_PORT=61065
USER=vcap
VCAP_APPLICATION={"instance_id":"acf562f42f014618bb456e230ca82770","instance_index":0,"host":"0.0.0.0","port":61065,"started_at":"2014-03-11 19:16:44 +0000","started_at_timestamp":1394565404,"start":"2014-03-11 19:16:44 +0000","state_timestamp":1394565404,"limits":{"mem":1024,"disk":1024,"fds":16384},"application_version":"1122dc5f-9983-4c23-1122-fc2567a7e8c1","application_name":"my-app","application_uris":["my-app.cfapps.io"],"version":"1122dc5f-9983-4c23-1122-fc2567a7e8c1","name":"my-app","uris":["my-app.cfapps.io"],"users":null}
SAMPLE-VARIABLE: 10000
PATH=/bin:/usr/bin
PWD=/home/vcap
VCAP_SERVICES={}
SHLVL=1
HOME=/home/vcap/app
PORT=61065
VCAP_APP_HOST=0.0.0.0
MEMORY_LIMIT=1024m
_=/usr/bin/env
</pre>

### <a id='logs'></a>Viewing Logs ###

To see recent log entries, use `cf logs APPNAME --recent`.

Example:

<pre class="terminal">
$ cf logs my-app --recent
Connected, dumping recent logs for app my-app in org my-org / space development as user@example.com...

2014-03-11T12:17:03.00-0700 [App/0]   OUT 19:17:03,002  INFO AnnotationConfigWebApplicationContext:513 - Refreshing Root WebApplicationContext: startup date [Tue Mar 11 19:17:03 UTC 2014]; root of context hierarchy
2014-03-11T12:17:03.25-0700 [App/0]   OUT 19:17:03,256  INFO AnnotationConfigWebApplicationContext:244 - Found 1 annotated classes in package [org.my-org.cofig.root]

. . .
</pre>

To see log entries in real time, use `cf logs APPNAME`.

Example:

<pre class="terminal">
$ cf logs my-app
Connected, tailing logs for app my-app in org my-org / space development as user@example.com...

. . .
</pre>

To explore all logs available in the container, first view the log filenames, then view the log that interests you.

Example:

<pre class="terminal">
$ cf files my-app logs
Getting files for app my-app in org my-org / space development as user@example...
OK

env.log                                   758B
staging_task.log                          848B
stderr.log                                3.1K
stdout.log                               10.5K

$ cf files my-app logs/staging_task.log
Getting files for app my-app in org my-org / space development as user@example.com...
OK

-----> Downloaded app package (19M)
-----> Downloaded app buildpack cache (42M)
-----> Java Buildpack source: system
-----> Downloading Open JDK 1.7.0_51 from http://d2vm4m9hl67ira.cloudfront.net/openjdk/lucid/x86_64/openjdk-1.7.0_51.tar.gz (0.0s)
       Expanding Open JDK to .java-buildpack/open_jdk (1.5s)
-----> Downloading Spring Auto Reconfiguration 0.8.7 from http://d2vm4m9hl67ira.cloudfront.net/auto-reconfiguration/auto-reconfiguration-0.8.7.jar (0.0s)
       Modifying /WEB-INF/web.xml for Auto Reconfiguration
-----> Downloading Tomcat 7.0.52 from http://d2vm4m9hl67ira.cloudfront.net/tomcat/tomcat-7.0.52.tar.gz (0.0s)
       Expanding Tomcat to .java-buildpack/tomcat (0.1s)
-----> Downloading Buildpack Tomcat Support 1.1.1 from http://d2vm4m9hl67ira.cloudfront.net/tomcat-buildpack-support/tomcat-buildpack-support-1.1.1.jar (0.0s)
</pre>